{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"injectionSelector": "L:text.html.php - (meta.embedded | meta.tag | comment.block.blade), L:(text.html.php meta.tag - (comment.block.blade | meta.embedded.block.blade)), L:(source.js.embedded.html - (comment.block.blade | meta.embedded.block.blade))",
	"scopeName": "source.php.blade",
	"name": "Blade",
	"patterns": [
		{
			"include": "#blade"
		}
	],
	"repository": {
		"blade": {
			"patterns": [
				{
					"begin": "{{--",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.blade"
						}
					},
					"end": "--}}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.blade"
						}
					},
					"name": "comment.block.blade",
					"patterns": [
						{
							"name": "invalid.illegal.php-code-in-comment.blade",
							"begin": "(^\\s*)(?=<\\?(?![^?]*\\?>))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.whitespace.embedded.leading.php"
								}
							},
							"end": "(?!\\G)(\\s*$\\n)?",
							"endCaptures": {
								"0": {
									"name": "punctuation.whitespace.embedded.trailing.php"
								}
							},
							"patterns": [
								{
									"begin": "<\\?(?i:php|=)?",
									"beginCaptures": {
										"0": {
											"name": "punctuation.section.embedded.begin.php"
										}
									},
									"contentName": "source.php",
									"end": "(\\?)>",
									"endCaptures": {
										"0": {
											"name": "punctuation.section.embedded.end.php"
										},
										"1": {
											"name": "source.php"
										}
									},
									"name": "meta.embedded.block.php",
									"patterns": [
										{
											"include": "source.php"
										}
									]
								}
							]
						},
						{
							"begin": "<\\?(?i:php|=)?(?![^?]*\\?>)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.embedded.begin.php"
								}
							},
							"contentName": "source.php",
							"end": "(\\?)>",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.embedded.end.php"
								},
								"1": {
									"name": "source.php"
								}
							},
							"name": "invalid.illegal.php-code-in-comment.blade.meta.embedded.block.php",
							"patterns": [
								{
									"include": "source.php"
								}
							]
						},
						{
							"begin": "<\\?(?i:php|=)?",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.embedded.begin.php"
								}
							},
							"end": ">",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.embedded.end.php"
								}
							},
							"name": "invalid.illegal.php-code-in-comment.blade.meta.embedded.line.php",
							"patterns": [
								{
									"captures": {
										"1": {
											"name": "source.php"
										},
										"2": {
											"name": "punctuation.section.embedded.end.php"
										},
										"3": {
											"name": "source.php"
										}
									},
									"match": "\\G(\\s*)((\\?))(?=>)",
									"name": "meta.special.empty-tag.php"
								},
								{
									"begin": "\\G",
									"contentName": "source.php",
									"end": "(\\?)(?=>)",
									"endCaptures": {
										"0": {
											"name": "punctuation.section.embedded.end.php"
										},
										"1": {
											"name": "source.php"
										}
									},
									"patterns": [
										{
											"include": "source.php"
										}
									]
								}
							]
						}
					]
				},
				{
					"begin": "(?<!@){{{",
					"beginCaptures": {
						"0": {
							"name": "support.function.construct.begin.blade"
						}
					},
					"contentName": "source.php",
					"end": "}}}",
					"endCaptures": {
						"0": {
							"name": "support.function.construct.end.blade"
						},
						"1": {
							"name": "source.php"
						}
					},
					"name": "meta.function.echo.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"begin": "(?<![@{]){{",
					"beginCaptures": {
						"0": {
							"name": "support.function.construct.begin.blade"
						}
					},
					"contentName": "source.php",
					"end": "}}",
					"endCaptures": {
						"0": {
							"name": "support.function.construct.end.blade"
						},
						"1": {
							"name": "source.php"
						}
					},
					"name": "meta.function.echo.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"begin": "(?<!@){!!",
					"beginCaptures": {
						"0": {
							"name": "support.function.construct.begin.blade"
						}
					},
					"contentName": "source.php",
					"end": "!!}",
					"endCaptures": {
						"0": {
							"name": "support.function.construct.end.blade"
						},
						"1": {
							"name": "source.php"
						}
					},
					"name": "meta.function.echo.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"begin": "(@){{",
					"beginCaptures": {
						"0": {
							"name": "begin.bracket.round.blade"
						},
						"1": {
							"name": "variable.other.index.php"
						}
					},
					"contentName": "source.php",
					"end": "}}",
					"endCaptures": {
						"0": {
							"name": "end.bracket.round.blade"
						},
						"1": {
							"name": "source.php"
						}
					},
					"name": "meta.function.echo.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"begin": "(?x)(?<![A-Za-z0-9_@]) (@  (?i:\n    auth\n    |break\n    |can\n    |cannot\n    |case\n    |choice\n    |component\n    |continue\n    |dd\n    |dump\n    |each\n    |elsecan\n    |elsecannot\n    |elseif\n    |empty\n    |error\n    |extends\n    |for\n    |foreach\n    |forelse\n    |guest\n    |hassection\n    |if\n    |include\n    |includefirst\n    |includeif\n    |includeunless\n    |includewhen\n    |inject\n    |isset\n    |json\n    |lang\n    |once\n    |prepend\n    |push\n    |section\n    |sectionMissing\n    |slot\n    |stack\n    |switch\n    |unless\n    |unset\n    |while\n    |yield\n    |servers\n    |task\n    |story\n    |finished\n    |production\n    |slack\n    |method\n    |props\n    |env\n    |livewire\n    |php\n  )[\\t ]*\n)(\\() # Followed by opening parentheses\n",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.blade"
						},
						"2": {
							"name": "begin.bracket.round.blade.php"
						}
					},
					"contentName": "source.php",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "end.bracket.round.blade.php"
						}
					},
					"name": "meta.directive.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"begin": "(?x)(?<![A-Za-z0-9_@]) (@  (?i:\n    append\n    |default\n    |else\n    |endauth\n    |endcan\n    |endcannot\n    |endcomponent\n    |endempty\n    |enderror\n    |endfor\n    |endforeach\n    |endforelse\n    |endguest\n    |endif\n    |endisset\n    |endlang\n    |endonce\n    |endprepend\n    |endpush\n    |endsection\n    |endslot\n    |endswitch\n    |endunless\n    |endwhile\n    |overwrite\n    |parent\n    |show\n    |stop\n    |endtask\n    |endstory\n    |endfinished\n    |endproduction\n    |endenv\n  )[\\t ]*\n)(\\() # Followed by opening parentheses\n",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.blade"
						},
						"2": {
							"name": "begin.bracket.round.blade.php"
						}
					},
					"contentName": "comment.blade",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "end.bracket.round.blade.php"
						}
					},
					"name": "meta.directive.blade",
					"patterns": [
						{
							"include": "#balance_brackets"
						}
					]
				},
				{
					"match": "(?x)(?<![A-Za-z0-9_@]) @(?:  append\n  |break\n  |continue\n  |csrf\n  |default\n  |each\n  |else\n  |overwrite\n  |parent\n  |sectionMissing\n  |show\n  |stack\n  |stop\n  |livewireStyles\n  |livewireScripts\n)\\b\n",
					"name": "keyword.control.blade"
				},
				{
					"match": "(?x)(?<![A-Za-z0-9_@]) @(end)? (?i:  auth\n  |can\n  |cannot\n  |component\n  |empty\n  |error\n  |for\n  |foreach\n  |forelse\n  |guest\n  |if\n  |isset\n  |lang\n  |prepend\n  |push\n  |section\n  |slot\n  |switch\n  |unless\n  |verbatim\n  |while\n  |task\n  |story\n  |finished\n  |production\n  |env\n  |once\n)\\b\n",
					"name": "keyword.control.blade"
				},
				{
					"begin": "(?<![A-Za-z0-9_@])@(?i:php|setup)\\b",
					"end": "(?<![A-Za-z0-9_@])(?=@(?i:endphp|endsetup)\\b)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						}
					},
					"contentName": "source.php",
					"name": "meta.embedded.block.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"begin": "(?x)(?<![A-Za-z0-9_@]) (@(?i:endphp|endsetup)[\\t ]*) (\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.section.embedded.end.php"
						},
						"2": {
							"name": "begin.bracket.round.blade.php"
						}
					},
					"contentName": "comment.blade",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "end.bracket.round.blade.php"
						}
					},
					"name": "meta.directive.blade",
					"patterns": [
						{
							"include": "#balance_brackets"
						}
					]
				},
				{
					"match": "(?x)(?<![A-Za-z0-9_@]) @(?:(?i)endphp|endsetup)\\b",
					"name": "punctuation.section.embedded.end.php"
				},
				{
					"begin": "(?x)(?<![A-Za-z0-9_@]) (@\\w+(?:::w+)?[\\t ]*) (\\() # Followed by opening parentheses",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.blade"
						},
						"2": {
							"name": "begin.bracket.round.blade.php"
						}
					},
					"contentName": "source.php",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "end.bracket.round.blade.php"
						}
					},
					"name": "meta.directive.custom.blade",
					"patterns": [
						{
							"include": "source.php"
						}
					]
				},
				{
					"match": "(?x)(?<![A-Za-z0-9_@]) @\\w+(?:::w+)?\\b",
					"name": "entity.name.function.blade"
				}
			]
		},
		"balance_brackets": {
			"patterns": [
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#balance_brackets"
						}
					]
				},
				{
					"match": "[^()]+"
				}
			]
		}
	}
}